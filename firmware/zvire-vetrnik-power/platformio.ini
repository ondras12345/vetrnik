; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = ATmega8

[env:ATmega8]
platform = atmelavr
board = ATmega8
framework = arduino
# remove bootloader (extra 512 bytes of flash)
board_hardware.uart = no_bootloader

build_flags =
	-DSERIAL_TX_BUFFER_SIZE=128

# Keep assembly language files
# They seem to contain garbage.
#	-save-temps
#	-fverbose-asm
# This is way better:
# (disassemble firmware)
# ~/.platformio/packages/toolchain-atmelavr/avr/bin/objdump -S .pio/build/ATmega8/firmware.elf

#upload_protocol = usbasp
# Erase flash before writing
# Normally only the write area is erased, which results in verification error.
#upload_flags =
#	-e

# I guess this won't work for bootloader, fuses and similar targets.
upload_protocol = custom
upload_flags =
	-p
	$BOARD_MCU
	-C
	avrdude.conf
	-c
	usbasp
#	-e  # we don't specify -D, so -e shouldn't be needed
#	-v
# see ~/.platformio/platforms/atmelavr/builder/main.py
#upload_command = echo avrdude $UPLOAD_FLAGS -U flash:w:$SOURCES:i
# $ needs to be escaped because of scons
upload_command =
	tar cf - $SOURCES -C ~/.platformio/packages/tool-avrdude/ avrdude.conf | ssh ntb1 'set -e; tmpdir=$$(mktemp -d -t tmp.XXXXXXXXXX); cleanup () { rm -rf "$$tmpdir"; }; trap cleanup EXIT; cd "$$tmpdir"; tar xf -; set -o xtrace; avrdude $UPLOAD_FLAGS -U flash:w:$SOURCES:i'

check_tool = cppcheck
check_flags =
	cppcheck: --suppress=unusedFunction --inline-suppr
check_skip_packages = true

# avrdude complains about fuses not being correct.
# This is because of an Arduino IDE-related hack in avrdude.conf
# For ATMEGA8, there is an extra 'memory "hfuse"'
# https://www.avrfreaks.net/forum/solved-avrdude-atmega8-reading-back-fuses-was-unreliable


; pio run -t compiledb to generate compile_commands.json for Vim youcompleteme


[env:uno]
platform = atmelavr
board = uno
framework = arduino
upload_port = /dev/ttyUSB0
test_port = /dev/ttyUSB0


[env:native]
# only for tests
platform = native
#test_ignore = test_embedded
# This overwrites default lib_deps.
#lib_deps = fabiobatsilva/ArduinoFake@^0.3.1
build_flags =
	-D UNITY_INT_WIDTH=16
